/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package struts.action.admin;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.actions.DispatchAction;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;

import struts.form.FaqForm;
import util.Constants;
import util.PagedListHolder;
import dao.FaqList;
import dao.FaqListDAO;
import factory.HibernateSessionFactory;

/**
 * MyEclipse Struts Creation date: 12-21-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/faq" name="faqForm" scope="request" validate="true"
 */
public class FaqAction extends DispatchAction
{
	ActionForward forward;

	/**
	 * Add a FAQ into database
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward addFaq(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	{
		FaqForm faqForm = (FaqForm) form;
		FaqList faq = new FaqList();

		faq.setAnswer(faqForm.getAnswer());
		faq.setQuestion(faqForm.getQuestion());

		Session session = HibernateSessionFactory.getSession();
		Transaction tx = session.beginTransaction();
		try
		{
			session.saveOrUpdate(faq);

			tx.commit();
			session.close();

		} catch (HibernateException e)
		{
			e.printStackTrace();
			tx.rollback();
			forward = mapping.findForward(Constants.FAILURE);
		}

		forward = new ActionForward("/faqAction.do?method=viewFaqList");
		// forward = mapping.findForward("viewFaqList");
		return forward;

	}

	public ActionForward deleteFaq(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	{
		FaqForm faqForm = (FaqForm) form;
		Long id = faqForm.getFaqId();

		FaqList faq;
		FaqListDAO dao = new FaqListDAO();
		faq = dao.findById(id);

		if (faq == null)
		{
			ActionErrors errors = new ActionErrors();

			errors.add("error", new ActionMessage("No such ID"));
			forward = mapping.findForward(Constants.ERROR);
		} else
		{
			Session session = HibernateSessionFactory.getSession();
			Transaction tx = session.beginTransaction();
			try
			{
				session.delete(faq);

				tx.commit();
				session.close();

			} catch (HibernateException e)
			{
				e.printStackTrace();
				tx.rollback();
				forward = mapping.findForward(Constants.FAILURE);
			}
			forward = new ActionForward("/faqAction.do?method=viewFaqList");
		}

		return forward;

	}

	public ActionForward updateFaq(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	{
		FaqForm faqForm = (FaqForm) form;
		FaqList faq;
		FaqListDAO dao = new FaqListDAO();

		faq = dao.findById(faqForm.getFaqId());
		faq.setAnswer(faqForm.getAnswer());
		faq.setQuestion(faqForm.getQuestion());

		dao.save(faq);
		forward = mapping.findForward("viewFaqList");
		return forward;

	}

	/**
	 * Show a list of FAQ for managing
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward viewFaqList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	{
		FaqListDAO dao = new FaqListDAO();
		List faqs = dao.findAll();
		if (faqs == null || faqs.size() == 0)
		{
			return mapping.findForward(Constants.FAILURE);
		}

		PagedListHolder faqList = new PagedListHolder(faqs);
		faqList.setPageSize(40);

		request.getSession().setAttribute("faqList", faqList);
		request.setAttribute("faqList", faqList);

		request.getSession().setAttribute("faqs", faqs);

		ActionForward forward = new ActionForward();
		forward = mapping.findForward("viewFaqList");

		return forward;
	}

	/**
	 * Display detail of a FAQ
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward displayFaq(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	{
		FaqForm faqForm = (FaqForm) form;
		FaqListDAO dao = new FaqListDAO();
		FaqList faq = dao.findById(faqForm.getFaqId());

		// FAQ not exist
		if (faq == null)
		{
			return mapping.findForward(Constants.FAILURE);
		}

		faqForm.setAnswer(faq.getAnswer());
		faqForm.setQuestion(faq.getQuestion());

		forward = mapping.findForward("displayFaq");
		return forward;

	}
}